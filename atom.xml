<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OrangeEd1t</title>
  
  
  <link href="https://blog.orangehub.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.orangehub.cn/"/>
  <updated>2021-03-25T08:36:18.852Z</updated>
  <id>https://blog.orangehub.cn/</id>
  
  <author>
    <name>OrangeEd1t</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用ZerotierOne+Moon搭建高质量的远程桌面</title>
    <link href="https://blog.orangehub.cn/2020/08/13/%E4%BD%BF%E7%94%A8ZerotierOne-Moon%E6%90%AD%E5%BB%BA%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"/>
    <id>https://blog.orangehub.cn/2020/08/13/%E4%BD%BF%E7%94%A8ZerotierOne-Moon%E6%90%AD%E5%BB%BA%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/</id>
    <published>2020-08-13T11:35:14.000Z</published>
    <updated>2021-03-25T08:36:18.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>因为公司笔记本的TeamViewer被检测到商业行为，给我限制最多只能链接5分钟。这尼玛能忍？自己动手搞一个</p><h1 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h1><ul><li>云服务器</li><li>Zerotier账号</li><li>两台电脑（能上网）</li></ul><h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><h2 id="第一步：申请Zerotier账号"><a href="#第一步：申请Zerotier账号" class="headerlink" title="第一步：申请Zerotier账号"></a>第一步：申请Zerotier账号</h2><p>点击<a href="https://www.zerotier.com/" target="_blank" rel="noopener">Zerotier</a>官网</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20200815142113.png" alt="image-20200815142113041"></p><p>点击图片中的红框进行登录</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20200815142434.png" alt="image-20200815142434568"></p><p>登录成功后，点击【Networks】创建网络</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20200815143304.png" alt="image-20200815143304685"></p><p>网络创建完成后，记录下你的【Network ID】并按照上图进行设置</p><h2 id="第二步：购买云服务器"><a href="#第二步：购买云服务器" class="headerlink" title="第二步：购买云服务器"></a>第二步：购买云服务器</h2><p>请自行<a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a></p><h2 id="第三步：安装Zerotier服务和客户端"><a href="#第三步：安装Zerotier服务和客户端" class="headerlink" title="第三步：安装Zerotier服务和客户端"></a>第三步：安装Zerotier服务和客户端</h2><p><a href="https://www.zerotier.com/download/" target="_blank" rel="noopener">Zerotier客户端下载</a></p><p>在两台电脑上分别下载安装后客户端，启动程序</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20200815165928.png" alt="image-20200815165928858"></p><p>点击【Join Network】输入第一步中我们保存的【Network ID】</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20200815170357.png" alt="image-20200815170356916"></p><p>打开Zerotier网站，在你创建的网络中，你将会看见已加入当前网络的设备，按照上图的进行设置后，你将会在【Managed IPs】列看到设备所对应的IP地址，保存这个IP地址，该IP地址将是你以后你设备远程链接的IP地址。</p><p>至此，只要双方都加入了该网络你就可以通过IP地址远程访问了。</p><h2 id="第四步：在服务器配置Moon"><a href="#第四步：在服务器配置Moon" class="headerlink" title="第四步：在服务器配置Moon"></a>第四步：在服务器配置Moon</h2><p>本来到上一步就应该结束了，无奈Zerotier的速度太慢（百度说因为服务器在国外的原因），所以本着好人做到底的原则，就提个速吧。</p><p>这里选择的是腾讯云的国内服务器，只要服务器能又公网IPV4即可。</p><p>首先，在服务器上安装Zerotier客户端</p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https:&#x2F;&#x2F;install.zerotier.com&#x2F; | sudo bash</span><br></pre></td></tr></table></figure><p>接着，加入网络(xxxx 是你第一步保存的 Network ID)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zerotier-cli join xxxx</span><br></pre></td></tr></table></figure><p>进入Zerotier的默认安装目录，生成moon配置文件，依次输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;lib&#x2F;zerotier-one</span><br><span class="line">zerotier-idtool initmoon identity.public &gt;&gt;moon.json</span><br></pre></td></tr></table></figure><p>执行完命令后会在当前目录下生成一个文件 moon.json，文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;id&quot;: &quot;0b1a7e88b0&quot;,</span><br><span class="line"> &quot;objtype&quot;: &quot;world&quot;,</span><br><span class="line"> &quot;roots&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">   &quot;identity&quot;: &quot;0b1c7d85b0:0:8e02a7375fc633220eaac4d4d63a14642b6d9845dc1a984506770e278a86901fa54257d554378934ab66c7e3b923b6686b1be6dc0e239efbde764aad3a6419a3&quot;,</span><br><span class="line">   &quot;stableEndpoints&quot;: []</span><br><span class="line">  &#125;</span><br><span class="line"> ],</span><br><span class="line"> &quot;signingKey&quot;: &quot;3f4d8c63cf9ed2cc075f67be5b785fda63248e134e41d3bc2bc415f850c61c48fbdc7750e2cc9910887423f660f63cb82463b7baf0613b8321005a99b4516948&quot;,</span><br><span class="line"> &quot;signingKey_SECRET&quot;: &quot;84e4fcdc050f1bd8b43f171e7d86579b028fe32ea6e5d5775e65a09c2376df8fddfeb06b5817c43c02bb0f84a622ed06f303eb2aa5d30249bbd2406f6cbc8a31&quot;,</span><br><span class="line"> &quot;updatesMustBeSignedBy&quot;: &quot;3f4d8c63cf9ed2cc075f67be5b785fda63248e134e41d3bc2bc415f850c61c48fbdc7750e2cc9910887423f660f63cb82463b7baf0613b8321005a99b4516948&quot;,</span><br><span class="line"> &quot;worldType&quot;: &quot;moon&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改【stableEndpoints】的值为公网IP+端口号的格式，类似于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;stableEndpoints&quot;: [&quot;255.255.255.88&#x2F;9992&quot;]</span><br></pre></td></tr></table></figure><p>修改完成后，执行命令生成签名文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-idtool genmoon moon.json</span><br></pre></td></tr></table></figure><p>此命令执行完成后，会生成一个签名文件在当前目录下，文件名：0000000b1a7e88b0.moon </p><p>签名文件生成后，就在签名文件的当前目录下新建一个文件夹（文件夹名：moons.d），然后将签名文件放在文件夹里，重启服务器即可。</p><h2 id="第五步：在客户端使用配置好的Moon文件"><a href="#第五步：在客户端使用配置好的Moon文件" class="headerlink" title="第五步：在客户端使用配置好的Moon文件"></a>第五步：在客户端使用配置好的Moon文件</h2><p>将客户端连接上Moon节点的方法有很多，这里我就举一个比较简单的方法。</p><p>将在服务器中创建的moons.d文件夹下载到本地（包括里面生成的签名文件），然后将这个文件拷贝到Zerotier的目录下，然后重启电脑即可。</p><p>不同系统下的 Zerotier 目录位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Windows: C:\ProgramData\ZeroTier\One</span><br><span class="line">Macintosh: &#x2F;Library&#x2F;Application Support&#x2F;ZeroTier&#x2F;One (在 Terminal 中应为 &#x2F;Library&#x2F;Application\ Support&#x2F;ZeroTier&#x2F;One)</span><br><span class="line">Linux: &#x2F;var&#x2F;lib&#x2F;zerotier-one</span><br><span class="line">FreeBSD&#x2F;OpenBSD: &#x2F;var&#x2F;db&#x2F;zerotier-one</span><br></pre></td></tr></table></figure><p>至此，所有的操作都完成了，如果需要查看是否链接上Moon节点，则输入命令<code>zerotier-cli listpeers</code></p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20200815182749.png" alt="image-20200815182749668"></p><p>如图中红框出现了你云服务器的IP地址和端口号，则表示连接成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;因为公司笔记本的TeamViewer被检测到商业行为，给我限制最多只能链接5分钟。这尼玛能忍？自己动手搞一个&lt;/p&gt;
&lt;h1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>npm依赖包的安装、更新和删除</title>
    <link href="https://blog.orangehub.cn/2020/07/10/npm%E4%BE%9D%E8%B5%96%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4/"/>
    <id>https://blog.orangehub.cn/2020/07/10/npm%E4%BE%9D%E8%B5%96%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4/</id>
    <published>2020-07-10T03:43:32.000Z</published>
    <updated>2021-03-25T08:36:18.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li>安装但不写入package.json</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx</span><br></pre></td></tr></table></figure><ul><li>安装并写入package.json的”dependencies”中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx -S</span><br></pre></td></tr></table></figure><ul><li>安装并写入package.json的”devDependencies”中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx -D</span><br></pre></td></tr></table></figure><ul><li>全局安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx -g</span><br></pre></td></tr></table></figure><ul><li>安装指定版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx@1.2.0</span><br></pre></td></tr></table></figure><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>首先，我们需要检查过期的依赖包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm outdated</span><br></pre></td></tr></table></figure><p>执行该命令，我们可以看到所有已经过期的依赖包，接下来我们安装”npm-check-updates“模块。（若已安装，则跳过该步骤）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm-check-updates -g</span><br></pre></td></tr></table></figure><p>安装完成后，我们执行以下命令，检查需要更新的模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuc</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm-check-updates</span><br></pre></td></tr></table></figure><p>接下来，我们就开始更新package.json的依赖包到最新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncu -u</span><br></pre></td></tr></table></figure><blockquote><p> 以上命令执行，会更新全部模块。但在实际开发中不建议一次全部更新，可以根据实际需要，更新指定的模块，并且可以根据作用范围在后面加上 -D、-S 或 -g</p></blockquote><p>最后，为了保险起见，package.json 更新后，可删除整个node_modules目录并执行以下命令来重新初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><ul><li>删除指定模块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall xxx</span><br></pre></td></tr></table></figure><ul><li>删除全局模块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g xxx</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;安装但不写入package.json&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>防抖、节流、重绘与回流</title>
    <link href="https://blog.orangehub.cn/2019/06/14/%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81%E3%80%81%E9%87%8D%E7%BB%98%E4%B8%8E%E5%9B%9E%E6%B5%81/"/>
    <id>https://blog.orangehub.cn/2019/06/14/%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81%E3%80%81%E9%87%8D%E7%BB%98%E4%B8%8E%E5%9B%9E%E6%B5%81/</id>
    <published>2019-06-14T07:05:45.000Z</published>
    <updated>2021-03-25T08:36:18.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>最近在查漏补缺（其实就是菜），发现一段时间不学习后就会被新的知识所淘汰呢，只有不断地努力学习才能不断地提高自己。</p><p>今天我们就来讲一下最近前端的几个新名词：防抖、节流、重绘和回流。虽说是新名词，但并不是新技术。</p><h1 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h1><h2 id="概念（定义）"><a href="#概念（定义）" class="headerlink" title="概念（定义）"></a>概念（定义）</h2><ul><li><p><strong>防抖：任务频繁触发的情况下，只有任务触发的间隔超过制定的时间间隔的时候，任务才会被执行。</strong></p></li><li><p><strong>节流：指定时间间隔内只会执行一次任务。</strong></p></li></ul><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>这里引用了知乎上的一段示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>防抖<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"debounce"</span>&gt;</span>点我防抖！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 1、获取这个按钮，并绑定事件</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> myDebounce = <span class="built_in">document</span>.getElementById(<span class="string">"debounce"</span>);</span></span><br><span class="line"><span class="actionscript">      myDebounce.addEventListener(<span class="string">"click"</span>, debounce(sayDebounce));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2、防抖功能函数，接受传参</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">debounce</span><span class="params">(fn)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 4、创建一个标记用来存放定时器的返回值</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 5、每次当用户点击/输入的时候，把前一个定时器清除</span></span></span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 6、然后创建一个新的 setTimeout，</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 这样就能保证点击按钮后的 interval 间隔内</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 如果用户还点击了的话，就不会执行 fn 函数</span></span></span><br><span class="line"><span class="javascript">        timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">          fn();</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3、需要进行防抖的事件处理</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">sayDebounce</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// ... 有些需要防抖的工作，在这里执行</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"防抖成功！"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们来理解一下代码：</p><ol><li>我们点击页面上的按钮，执行 <code>debounce</code>函数，并传入参数<code>sayDebounce</code></li><li>在函数<code>debounce</code>中返回了一个匿名函数，并在匿名函数中定义了一个定时器。</li><li>执行匿名函数时，先清除定时器，然后再创建一个新的定时器。</li><li>延时1秒执行传入的函数<code>sayDebounce()</code></li></ol><p>程序大致的执行过程已经介绍完了，整个防抖程序的关键就在于第3步中。</p><p>为什么这么说呢？</p><p>因为，我们每次点击都会去执行匿名函数，匿名函数每次执行前都会去清除一次定时器，然后再重新定义定时器。这样做就会让函数永远都只会在满足定时器制定的时间间隔后才会执行。（可能这样说有点不恰当）。我们改造一下这个<code>sayDebounce</code>函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayDebounce</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//console.log("防抖成功！");</span></span><br><span class="line"><span class="keyword">let</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> mytime=myDate.toLocaleTimeString();</span><br><span class="line"><span class="built_in">console</span>.log(myDate.toLocaleString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们再次执行程序的时候控制台打印出来的时间永远都是我们最后一次点击的时间加上1秒（不考虑程序执行时间）。</p><p><strong>举个栗子：</strong></p><p>假设，我今天要去抢手机，手机早上11点整开售，我们10点59分50秒进去疯狂点击，但是由于抢购按钮采用了防抖，且时间间隔为1秒，那么无论我们手速多块，一秒点多少次，都是无效的。因为程序根本不会执行到抢购程序那里，所以最好的抢购时机就是10点59分59秒的时候点击，那么11点整的时候正好执行了抢购程序（不考虑程序执行时间）。</p><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>同样，这里也是引用了知乎的一个示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>节流<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"throttle"</span>&gt;</span>点我节流！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 1、获取按钮，绑定点击事件</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> myThrottle = <span class="built_in">document</span>.getElementById(<span class="string">"throttle"</span>);</span></span><br><span class="line"><span class="actionscript">      myThrottle.addEventListener(<span class="string">"click"</span>, throttle(sayThrottle));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2、节流函数体</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">throttle</span><span class="params">(fn)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 4、通过闭包保存一个标记</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> canRun = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 5、在函数开头判断标志是否为 true，不为 true 则中断函数</span></span></span><br><span class="line">        if(!canRun) &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 6、将 canRun 设置为 false，防止执行之前再被执行</span></span></span><br><span class="line"><span class="actionscript">        canRun = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 7、定时器</span></span></span><br><span class="line"><span class="javascript">        setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">          fn();</span><br><span class="line"><span class="actionscript">          <span class="comment">// 8、执行完事件（比如调用完接口）之后，重新将这个标志设置为 true</span></span></span><br><span class="line"><span class="actionscript">          canRun = <span class="literal">true</span>;</span></span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3、需要节流的事件</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">sayThrottle</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"节流成功！"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们首先来解释一下代码：</p><ol><li>我们点击页面上的按钮，执行 <code>throttle</code>函数，并传入参数<code>sayThrottle</code></li><li>在函数<code>throttle</code>中定义了一个bool变量<code>canRun</code>，赋值为true；还返回了一个匿名函数。</li><li>在执行匿名函数时，先判断<code>canRun</code>，若值为false,则<code>return</code>，反之赋值<code>canRun</code>赋值为false，然后再创建一个定时器。</li><li>在定时器中延时1秒执行传入的函数<code>sayThrottle()</code>，并将<code>canRun</code>的值赋为true。</li></ol><p>程序的大致执行过程已经介绍完了，整个节流程序中核心步骤在第3步与第4步中。</p><p>每次我们点击按钮，程序都会去执行匿名函数。在执行匿名函数中的定时器之前，程序会先去判断<code>canRun</code>的值，若值为false，则直接退出程序。反之才会执行定时器。即，程序第一次执行完之前，该程序是无法继续去执行第二次的。我们改造一下这个<code>sayThrottle</code>函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayThrottle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//console.log("节流成功！");</span></span><br><span class="line"><span class="keyword">let</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> mytime=myDate.toLocaleTimeString();</span><br><span class="line"><span class="built_in">console</span>.log(myDate.toLocaleString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们再次执行程序的时候在控制台会依次打印出前一次成功执行后第一个点击的时间（有点绕）。比如，我2019-06-14 10:00:00第一次点击，然后我疯狂点击，比如在10:00:00到10:00:01这一秒内我点了100次，但是控制台最终只会打印出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-06-14 10:00:00</span><br><span class="line">2019-06-14 10:00:01</span><br></pre></td></tr></table></figure><p><strong>举个栗子：</strong></p><p>跟前面一样。假设，我今天要去抢手机，手机早上11点整开售，我们10点59分50秒进去疯狂点击，但是由于抢购按钮采用了节流，且时间间隔为1秒，那么无论我们手速多块，一秒点多少次，都是无效的。因为程序只会在50秒的时候出发，51秒执行完成，完成后因为我们点的速度很快，程序立马又继续被触发。所以无论我们50-51秒内点击了多少次都不会影响程序的正常执行的（不考虑程序执行时间）。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>函数节流不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数，而函数防抖只是在最后一次事件后才触发一次函数。 比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流技术来实现。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>函数防抖：</strong>将多次操作合并为一次操作进行。原理是维护一个计时器，规定在一定时间后触发函数，但是在规定时间内再次触发的话，就会取消之前的计时器而重新设置。这样一来，只有最后一次操作能被触发。</li><li><strong>函数节流：</strong>使得一定时间内只触发一次函数。原理是通过判断是否有延迟调用函数未执行。</li><li>函数防抖属于<strong>阻止函数继续执行</strong>，函数节流属于<strong>稀释函数执行频率</strong>。</li></ul><h1 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h1><h2 id="概念（定义）-1"><a href="#概念（定义）-1" class="headerlink" title="概念（定义）"></a>概念（定义）</h2><ul><li><p><strong>重绘(repaint)：当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时由于只需要 UI 层面的重新像素绘制。</strong></p></li><li><p><strong>回流(reflow)：又叫重排（layout），当元素的尺寸、结构或者触发某些属性时，浏览器会重新渲染页面，称为回流。此时，浏览器需要重新经过计算，计算后还需要重新页面布局。</strong></p></li></ul><h2 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h2><ul><li>重绘：<ul><li>改变元素颜色</li><li>改变元素背景色</li><li>……</li></ul></li><li>回流：<ul><li>页面首次渲染时</li><li>浏览器窗口大小改变</li><li>元素尺寸、位置和内容发生改变</li><li>字体大小的变化</li><li>添加或删除DOM元素</li><li>激活CSS伪类</li><li>……</li></ul></li></ul><p><strong>注意：回流必定会触发重绘，重绘不一定会触发回流。重绘的开销较小，回流的代价较高。</strong></p><h2 id="与防抖和节流的关系"><a href="#与防抖和节流的关系" class="headerlink" title="与防抖和节流的关系"></a>与防抖和节流的关系</h2><p>为什么需要 <strong>节流</strong>？它与回流有什么关系？</p><p>因为有些事情会造成浏览器的 <strong>回流</strong>，而 <strong>回流</strong> 会使浏览器开销增大，所以我们通过 <strong>节流</strong> 来防止这种增大浏览器开销的事情。</p><p><strong>举个栗子：</strong></p><p>页面上有个 div 框，用户可以在 input 框中输入 div 框的一些信息，例如宽、高等，输入完毕立即改变属性。但是，因为改变之后还要随时存储到数据库中，所以需要调用接口。如果不加限制，每输入完一个属性后都会造成一次回流和一次接口的调用，这样会大大增加浏览器的开销。</p><h2 id="如何减少使用"><a href="#如何减少使用" class="headerlink" title="如何减少使用"></a>如何减少使用</h2><p>既然重绘和回流都会增加浏览器的开销，那么我们因该怎样去避免大量使用他们呢？</p><ul><li>避免频繁操作样式，可汇总后统一一次修改</li><li>尽量使用 class 进行样式修改，而不是直接操作样式</li><li>减少 DOM 的操作，可使用字符串一次性插入</li></ul><p>做到这三点，就可以大大减少回流与重绘的使用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;最近在查漏补缺（其实就是菜），发现一段时间不学习后就会被新的知识所淘汰呢，只有不断地努力学习才能不断地提高自己。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VSCode摸鱼插件-三</title>
    <link href="https://blog.orangehub.cn/2019/06/02/VSCode%E6%91%B8%E9%B1%BC%E6%8F%92%E4%BB%B6-%E4%B8%89/"/>
    <id>https://blog.orangehub.cn/2019/06/02/VSCode%E6%91%B8%E9%B1%BC%E6%8F%92%E4%BB%B6-%E4%B8%89/</id>
    <published>2019-06-02T06:45:43.000Z</published>
    <updated>2021-04-07T07:12:35.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>项目的源码我已传至<a href="https://github.com/OrangeEd1t/VSCode-MOYU" target="_blank" rel="noopener">GitHub</a>欢迎clone。该项目是一个比较简单，适合新手入门的一个项目，项目结构简单不复杂。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>与上篇文章的目录结构大致类似</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151223.png" alt="1559459317375"></p><p>我们仅需要关注红框标识部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* package.json[文件]:该文件在上篇文章中已提到，此处不再赘述。</span><br><span class="line">* src[文件夹]:我们整个项目的存放目录。</span><br><span class="line">* Common[文件夹]:这里存放的是我们程序实现的主体。</span><br><span class="line">* test[文件夹]:这个文件夹里主要存放的测试需要的文件，可以不用去管它。</span><br><span class="line">* api.ts[文件]:这里存放的是获取数据的程序。</span><br><span class="line">* extension.ts[文件]:该文件在上篇文章中已提到，此处不再赘述。</span><br></pre></td></tr></table></figure><h2 id="项目执行流程"><a href="#项目执行流程" class="headerlink" title="项目执行流程"></a>项目执行流程</h2><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151226.png" alt="1559463239033"></p><h2 id="项目调试"><a href="#项目调试" class="headerlink" title="项目调试"></a>项目调试</h2><p>vscode插件的调试非常简单方便，只需要在需要调试的地方打个断点，然后按<code>F5</code>执行即可：</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151230.png" alt="1560495124325"></p><h2 id="项目发布"><a href="#项目发布" class="headerlink" title="项目发布"></a>项目发布</h2><p>vsCode的插件发布也是非常的建单的，主要有3种方法：</p><ul><li>直接把文件夹发给别人，别人找到vscode的插件存放目录并放进去，然后重启vscode。（不推荐）</li><li>方法二：打包成vsix插件，然后发送给别人安装，如果你的插件涉及机密不方便发布到应用市场，可以尝试采用这种方式；</li><li>方法三：注册开发者账号，发布到官网应用市场，这个发布和npm一样是不需要审核的。（推荐）</li></ul><p>采用什么方式发布，可以根据自己的需要来决定。</p><p>具体参考该<a href="https://www.cnblogs.com/liuxianan/p/vscode-plugin-publish.html" target="_blank" rel="noopener">文章</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;项目的源码我已传至&lt;a href=&quot;https://github.com/OrangeEd1t/VSCode-MOYU&quot; t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VSCode摸鱼插件-二</title>
    <link href="https://blog.orangehub.cn/2019/05/20/VSCode%E6%91%B8%E9%B1%BC%E6%8F%92%E4%BB%B6-%E4%BA%8C/"/>
    <id>https://blog.orangehub.cn/2019/05/20/VSCode%E6%91%B8%E9%B1%BC%E6%8F%92%E4%BB%B6-%E4%BA%8C/</id>
    <published>2019-05-20T02:19:21.000Z</published>
    <updated>2021-04-07T07:13:39.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>VSCode的插件开发可以使用<a href="https://github.com/Microsoft/vscode-generator-code" target="_blank" rel="noopener">微软官方的脚手架</a>来生成项目结构，这种方式最方便快捷。话不多说，接下来我们就来搭建一个建单的项目框架。</p><h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><h2 id="安装脚手架"><a href="#安装脚手架" class="headerlink" title="安装脚手架"></a>安装脚手架</h2><p>打开控制台，键入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yo generator-code</span><br></pre></td></tr></table></figure><h2 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h2><p>安装好脚手架之后，在控制台运行以下代码，开始启动生成器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yo code</span><br></pre></td></tr></table></figure><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151243.png" alt="1558320150679"></p><p>跟着安装提示一步一步的来，最后生成一个项目，项目的大致结构如下：</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151330.png" alt="1558322417845"></p><p>PS：基本上我们所有的代码都会存在于src这个文件夹的目录下。</p><h2 id="基本文件解读"><a href="#基本文件解读" class="headerlink" title="基本文件解读"></a>基本文件解读</h2><h3 id="清单文件-package-json"><a href="#清单文件-package-json" class="headerlink" title="清单文件(package.json)"></a>清单文件(package.json)</h3><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151333.png" alt="1558323614786"></p><p>在上面的截图中，我红框标注的地方就是，整个项目入口的关键位置，下面我们对截图中的部分代码进行一个说明：</p><pre><code>*  `main` 定义了整个插件的主入口；*  我们在`contriibutes.commands`里面注册了一个名为`extension.helloWorld`的命令，并在`src/extension.js`中去实现了它（弹出一个`Hello World`的提示）；*  但是仅仅这样还不够，命令虽然定义了，但是vscode还不知道啥时候去执行它，还需要在`activationEvents`添加上`onCommand:extension.helloWorld`用来告诉vscode，当用户执行了这个命令操作时去执行前面我们定义的内容；</code></pre><h3 id="项目入口-extension-ts"><a href="#项目入口-extension-ts" class="headerlink" title="项目入口(extension.ts)"></a>项目入口(extension.ts)</h3><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151336.png" alt="1558323571702"></p><p>这个文件就是程序的入口文件，即上方<code>package.json</code>文件中<code>main</code>所对应路径的文件。其中，我红框标注的地方为程序的实现部分，这里的大致意思就是，我输入<code>helloWorld</code>这个命令，程序会自动在页面右下角弹出一个<code>Hello World</code>的提示框。</p><h1 id="多说两句"><a href="#多说两句" class="headerlink" title="多说两句"></a>多说两句</h1><p>该文章中所展示的是一个刚新建完成的项目结构（其实是我项目没写完，到现在都没写完），目的是让小白清楚大致的项目结构。从下篇文章起，我将采用我已经完成的项目结构进行讲解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;VSCode的插件开发可以使用&lt;a href=&quot;https://github.com/Microsoft/vscode-ge</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VSCode摸鱼插件-一</title>
    <link href="https://blog.orangehub.cn/2019/04/04/VSCode%E6%91%B8%E9%B1%BC%E6%8F%92%E4%BB%B6-%E4%B8%80/"/>
    <id>https://blog.orangehub.cn/2019/04/04/VSCode%E6%91%B8%E9%B1%BC%E6%8F%92%E4%BB%B6-%E4%B8%80/</id>
    <published>2019-04-04T04:10:41.000Z</published>
    <updated>2021-04-07T07:18:17.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于VSCode插件"><a href="#关于VSCode插件" class="headerlink" title="关于VSCode插件"></a>关于VSCode插件</h1><p>VSCode是微软推出的一款轻量级的代码编辑器（有点类似于但又不等于Sublime Text），这些都无所谓，主要是免费而且功能强大。功能强大的基础上因为友好的提示，不错的性能和颜值获得了很多人的青睐。</p><p>针对我个人而言，VSCode对我工作的影响还是蛮大的，主要是因为性能不错和友好的提示，当然丰富的插件扩展才是最最重要的哦。</p><p>VSCode一开始的定位就是一个轻量级的代码编辑器而非全宇宙最强IED Visual Studio，这也就意味着VSCode中有更多的功能会比IDE中少许多，这也是为什么VSCode的性能会好很多的一个重要原因——因为轻</p><h1 id="有必要学习VSCode插件吗"><a href="#有必要学习VSCode插件吗" class="headerlink" title="有必要学习VSCode插件吗"></a>有必要学习VSCode插件吗</h1><p>有！非常有必要！对于一个这么轻的代码编辑器，每个人肯定会有自己特殊的需求。所以掌握插件开发是一个必备的技能。</p><p>但至于我们开发什么样的插件，这个就需要我们从工作与生活中去寻找灵感了。</p><h1 id="VSCode插件能干什么"><a href="#VSCode插件能干什么" class="headerlink" title="VSCode插件能干什么"></a>VSCode插件能干什么</h1><p>VSCode插件能干的事情很多，具体的请参考<a href="https://code.visualstudio.com/api" target="_blank" rel="noopener">官方文档</a>了。</p><p>PS：一定要多去看看官方文档！！</p><h1 id="关于VSCode插件开发"><a href="#关于VSCode插件开发" class="headerlink" title="关于VSCode插件开发"></a>关于VSCode插件开发</h1><p>这会是一个系列的博文，虽然我也是第一次接触VSCode插件开发，但我还是会尽量详细的介绍我的一个开发的过程，以及开发中遇到的问题，如有遗漏或错误的地方还望大家能够指出，以便我及时改进。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于VSCode插件&quot;&gt;&lt;a href=&quot;#关于VSCode插件&quot; class=&quot;headerlink&quot; title=&quot;关于VSCode插件&quot;&gt;&lt;/a&gt;关于VSCode插件&lt;/h1&gt;&lt;p&gt;VSCode是微软推出的一款轻量级的代码编辑器（有点类似于但又不等于Subl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VPS购买+搭建以及BBR安装指南</title>
    <link href="https://blog.orangehub.cn/2018/12/11/VPS%E8%B4%AD%E4%B9%B0-%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8ABBR%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"/>
    <id>https://blog.orangehub.cn/2018/12/11/VPS%E8%B4%AD%E4%B9%B0-%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8ABBR%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/</id>
    <published>2018-12-11T08:14:33.000Z</published>
    <updated>2021-04-07T07:15:44.937Z</updated>
    
    <content type="html"><![CDATA[<p>由于工作需要，很多时候我们可能需要用科学上网的方式去查资料。科学上网的途径主要有以下几种：</p><ul><li><p>购买VPN</p></li><li><p>免费的VPN</p></li><li><p>搭建vps服务器</p><p>三种方式各有各的优缺点，主要还是看你怎么选择咯~</p><p>通过vpn上网的优点就是操作简单，比较适合不是经常使用科学上网的人，但是也有缺点。缺点就是容易被封，会被限制速度。</p><p>PS：免费VPN与付费VPN的主要区别在于安全性，也就是说免费的可能会泄露的个人信息。但是！试问谁在网上不是裸奔呢？</p><p>这里我主要讲第三种方式——搭建VPS服务器</p></li></ul><h1 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h1><p>  这里推荐几个个国外的VPS服务器厂商</p><ul><li><p><a href="https://www.vultr.com/?ref=7234693" target="_blank" rel="noopener">Vultr</a></p></li><li><p><a href="https://bwh8.net/" target="_blank" rel="noopener">Bandwagonhost(搬瓦工)</a></p><p>这两个算是比较不错的vps服务器厂商，因为我购买的时候搬瓦工已经没有了19.9刀一年的服务器了，所以我选择了<a href="https://www.vultr.com/?ref=7234693" target="_blank" rel="noopener">Vultr</a>，支持支付宝和微信付款，还是比较方便的。 </p></li></ul><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151349.png" alt="1544518834038"></p><p>填写你的e-mail地址和密码，然后创建一个账号，可能会需要你验证邮箱什么的，跟着操作就好咯，这里就不赘述了。</p><h2 id="激活账号"><a href="#激活账号" class="headerlink" title="激活账号"></a>激活账号</h2><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151403.png" alt="1544519242815"></p><p>登陆进去后点击左边菜单栏的Billing 选择 Alipay(支付宝)或者 WeChat Pay(微信)付款10刀才能激活账户，差不多够用两个多月左右(3.5刀/月)，激活完成后点击右上角的进行服务器的购买</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151354.png" alt="1544519460115"></p><h2 id="服务器选择"><a href="#服务器选择" class="headerlink" title="服务器选择"></a>服务器选择</h2><p>主要分为3步：选择服务器位置，选择系统，选择配置</p><h3 id="选择服务器位置"><a href="#选择服务器位置" class="headerlink" title="选择服务器位置"></a>选择服务器位置</h3><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151356.png" alt="1544519710470"></p><blockquote><p>理论上：离你越近越好，通常选择tokyo节点</p></blockquote><h3 id="选择系统"><a href="#选择系统" class="headerlink" title="选择系统"></a>选择系统</h3><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151418.png" alt="1544519790062"></p><blockquote><p>推荐选择 CentOs7</p></blockquote><h3 id="选择配置"><a href="#选择配置" class="headerlink" title="选择配置"></a>选择配置</h3><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151421.png" alt="1544520138453"></p><blockquote><p>由于2.5刀的配置只有ipv6，我们这里选择3.5刀的配置，这两个配置的区别就是一个没有ipv4一个有ipv4，由于ipv6不稳定，建议选择3.5刀的配置。</p></blockquote><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151425.png" alt="1544520311688"></p><blockquote><p>选择好了之后，我们点击下面的 Deploy Now 就OK啦~</p></blockquote><p>至此，服务器就已经购买完成啦，我们回到控制台界面。</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151432.png" alt="1544520544494"></p><p>这里就是你购买的服务器啦，下面我们开始搭建VPS</p><h1 id="搭建VPS"><a href="#搭建VPS" class="headerlink" title="搭建VPS"></a>搭建VPS</h1><p>点击你的服务器，进入服务器详细页面</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151436.png" alt="1544520682232"></p><blockquote><p>IP Address:你的IP地址</p><p>Username：用户名</p><p>Password：密码</p><p>小眼睛：查看密码</p></blockquote><h2 id="登陆服务器"><a href="#登陆服务器" class="headerlink" title="登陆服务器"></a>登陆服务器</h2><p>我们在电脑上(win10)呼出cmd（win+r =&gt; 输入cmd =&gt; 回车）</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151439.png" alt="1544520954626"></p><p>打开就是这样的，下面我们通过ssh登入服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@ip地址</span><br></pre></td></tr></table></figure><blockquote><p>用户名和ip地址需要你自己填写</p></blockquote><p>输入完成后需要输入密码</p><blockquote><p>密码不会显示出</p></blockquote><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151443.png" alt="1544521317476"></p><p>这样表示已经登录成功了。</p><h2 id="Shadowsocks版"><a href="#Shadowsocks版" class="headerlink" title="Shadowsocks版"></a>Shadowsocks版</h2><h3 id="安装Shadowsocks服务端"><a href="#安装Shadowsocks服务端" class="headerlink" title="安装Shadowsocks服务端"></a>安装Shadowsocks服务端</h3><p>在服务器上依次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line">sh shadowsocks-all.sh</span><br></pre></td></tr></table></figure><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151446.png" alt="1544599074840"></p><blockquote><p>选择你要安装的Shadowsocks版本，默认Python版</p></blockquote><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151449.png" alt="1544599114008"></p><blockquote><p>输入你的ShadowSocks密码，默认 teddysun.com</p></blockquote><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151452.png" alt="1544599239382"></p><blockquote><p>选择你的端口，默认10120端口</p></blockquote><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151455.png" alt="1544599281527"></p><blockquote><p>选择你的混淆方式，默认aes-256-gcm，这里建议选择aes-256-cfb的方式，只需要输入对应的序号即可</p></blockquote><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151458.png" alt="1544599370670"></p><blockquote><p>全部选择完成后，再按下回车就开始安装了。</p></blockquote><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151504.png" alt="1544599424944"></p><blockquote><p>安装完成后，脚本提示安装成功。</p></blockquote><p>至此，我们的ShadowSocks的服务端就安装完毕了。下面我们安装客户端，安装好客户端后，我们就能使用啦！</p><h3 id="安装ShadowSocks客户端"><a href="#安装ShadowSocks客户端" class="headerlink" title="安装ShadowSocks客户端"></a>安装ShadowSocks客户端</h3><p>常规版 Windows 客户端<br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p><p>ShadowsocksR 版 Windows 客户端<br><a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases" target="_blank" rel="noopener">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a></p><p>客户端安装好之后，我们来对客户端进行配置</p><p>打开你下载的客户端，在你的控制栏找到一个小飞机的图标，然后单击鼠标右键=&gt;服务器=&gt;编辑服务器=&gt;添加</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151520.png" alt="1544599985925"></p><p>依次输入你的ip地址，端口，密码以及加密方式，然后点击确定</p><p>最后，我们再将【启用系统代理】和【系统代理模式/全局模式】勾选上，就大功告成啦！</p><h2 id="v2ray版-19-12-2更新"><a href="#v2ray版-19-12-2更新" class="headerlink" title="v2ray版(19-12-2更新)"></a>v2ray版(19-12-2更新)</h2><h3 id="安装v2ray服务端"><a href="#安装v2ray服务端" class="headerlink" title="安装v2ray服务端"></a>安装v2ray服务端</h3><p>在服务器上依次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install curl vim -y</span><br><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151523.png" alt="v2ray1"></p><blockquote><p>当出现上图的界面时，表示安装成功，此时需要复制出图中红框标注的信息备用。</p></blockquote><p>此时我们仅安装好了v2ray，但并未启动，接下来我们来启动v2ray。</p><p>依次执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start v2ray</span><br><span class="line">systemctl status v2ray</span><br></pre></td></tr></table></figure><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151526.png" alt="v2ray2"></p><blockquote><p>出现上图界面时，表示v2ray已成功启动了。</p></blockquote><p>接下来我们就需要关闭防火墙了</p><blockquote><p><em>如果你的服务器上有重要资料，那么请不要关闭防火墙，建议你百度一下【你的系统+防火墙开放端口】（例如搜索：CentOS 7 防火墙开放端口）来学习如何放行端口，只要放行刚刚安装完成提示的端口即可，命令也简单，但是不同的系统不一定一样，这里就不展开了。</em></p></blockquote><p>执行以下命令（3组只需要执行一组即可，如果报错就换一组执行）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"> </span><br><span class="line">servcie iptables stop</span><br><span class="line">chkconfig iptables off</span><br><span class="line"> </span><br><span class="line">ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><p>至此，我们v2ray的服务端就安装完成啦，接下来是客户端的安装与配置。</p><h3 id="安装v2ray客户端"><a href="#安装v2ray客户端" class="headerlink" title="安装v2ray客户端"></a>安装v2ray客户端</h3><p>我这里整理了一些不同平台的客户端</p><ul><li>v2rayW（Windows）： <a href="https://github.com/Cenmrev/V2RayW/releases" target="_blank" rel="noopener">Github</a></li><li>V2RayN（Windows）： <a href="https://github.com/2dust/v2rayN/releases" target="_blank" rel="noopener">Github</a></li><li>v2rayX（macOS）： <a href="https://github.com/Cenmrev/V2RayX/releases" target="_blank" rel="noopener">Github</a></li><li>V2RayU（macOS）： <a href="https://github.com/yanue/V2rayU/releases" target="_blank" rel="noopener">Github</a></li><li>Shadowrocket（iOS）： <a href="https://itunes.apple.com/us/app/shadowrocket/id932747118?mt=8" target="_blank" rel="noopener">itunes</a></li><li>i2Ray（iOS）： <a href="https://itunes.apple.com/us/app/i2ray/id1445270056?mt=8" target="_blank" rel="noopener">itunes</a></li><li>Quantumult（iOS）： <a href="https://itunes.apple.com/us/app/quantumult/id1252015438?mt=8" target="_blank" rel="noopener">itunes</a></li><li>BifrostV（Android）： <a href="https://play.google.com/store/apps/details?id=com.github.dawndiy.bifrostv" target="_blank" rel="noopener">Play商店</a> | <a href="https://apkpure.com/bifrostv/com.github.dawndiy.bifrostv" target="_blank" rel="noopener">ApkPure</a></li><li>V2RayNG（Android）： <a href="https://play.google.com/store/apps/details?id=com.v2ray.ang" target="_blank" rel="noopener">Play商店</a> | <a href="https://github.com/2dust/v2rayNG/releases" target="_blank" rel="noopener">Github</a></li></ul><p>由于版本众多，我就不一一展示了，这里就用windows的客户端v2rayN展示一下就好了，其实配置都是大同小异的。</p><p>在github上面下载完成后解压</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151530.png" alt="v2ray3"></p><blockquote><p>文件目录大致是这样，双击运行红框的.exe文件</p></blockquote><p><img src="/2018/12/11/VPS%E8%B4%AD%E4%B9%B0-%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8ABBR%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/VPS%E8%B4%AD%E4%B9%B0-%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8ABBR%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97%5Cv2ray4.png" alt="v2ray4"></p><blockquote><p>启动成功后，在任务栏会有这样一个图标，双击图标显示软件主界面</p></blockquote><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151533.png" alt="v2ray5"></p><blockquote><p>点击服务器-&gt;添加[vmess]服务器</p></blockquote><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151536.png" alt="v2ray6"></p><blockquote><p>依次输入：服务器IP、端口、用户ID、额外ID、加密方式、传输协议等信息。</p></blockquote><p><strong>端口：安装完成时让你保存的PORT的值</strong></p><p><strong>用户ID：安装完成时让你保存的UUID的值</strong></p><p><strong>额外ID、加密方式和传输协议按照图片中填写即可</strong></p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151539.png" alt="v2ray7"></p><p>配置完成后，回车启用就可以开始网上重浪了。</p><h1 id="安装BBR"><a href="#安装BBR" class="headerlink" title="安装BBR"></a>安装BBR</h1><p>BBR 是 Google 提出的一种新型拥塞控制算法，可以使 Linux 服务器显著地提高吞吐量和减少 TCP 连接的延迟。</p><p>BBR解决了两个问题：</p><ul><li><p>再有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。</p></li><li><p>降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。</p></li></ul><p>下面让我们开始安装吧！</p><p>安装之前我们需要先检查一下我们服务器的内核版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>如果得到的结果是3.xx.x什么的话，那我们需要先升级下内核到4.10版本以上</p><h2 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h2><p>依次输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">sudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line">sudo yum --enablerepo=elrepo-kernel install kernel-ml -y</span><br></pre></td></tr></table></figure><p>然后再检查下内核版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep kernel</span><br></pre></td></tr></table></figure><p>如果输出结果显示 kernel-ml-4.19.xxxx 类似的内容说明安装成功</p><h2 id="修改grub2引导"><a href="#修改grub2引导" class="headerlink" title="修改grub2引导"></a>修改grub2引导</h2><p>输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \<span class="string">'</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CentOS Linux 7 Rescue 3432d83bf4954c0d8cafec87176dfc15 (4.19.8-1.el7.elrepo.x86_64)</span><br><span class="line">CentOS Linux (4.19.8-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (3.10.0-957.1.3.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (3.10.0-957.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (0-rescue-84d6e1c3c43d427ab345edad898ac223) 7 (Core)</span><br></pre></td></tr></table></figure><p>选择我们需要的内核 也就是 4.19.xxxx的那个</p><p>输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo grub2-set-default 1</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>这里的 1 代表的是上面输出的第二排，以此类推。第一排代表0</p><p>重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>重启完成后，重新登录并重新运行命令来确认你是否使用了正确的内核：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>如果得到 【4.19.8-1.el7.elrepo.x86_64 】之类的，则说明升级成功</p><h2 id="开启BBR"><a href="#开启BBR" class="headerlink" title="开启BBR"></a>开启BBR</h2><p>输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'net.core.default_qdisc=fq'</span> | sudo tee -a /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'net.ipv4.tcp_congestion_control=bbr'</span> | sudo tee -a /etc/sysctl.conf</span><br><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure><p>执行完成后我们来检查一下是否执行成功，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line"><span class="comment"># 输出应为 net.ipv4.tcp_available_congestion_control = bbr cubic reno</span></span><br><span class="line">sudo sysctl -n net.ipv4.tcp_congestion_control</span><br><span class="line"><span class="comment"># 输出应为 bbr</span></span><br><span class="line">lsmod | grep bbr</span><br><span class="line"><span class="comment"># 输出应类似 tcp_bbr  16384  28</span></span><br></pre></td></tr></table></figure><p>至此，我们的所有配置已经完成了，现在可以surf the Internet 啦！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于工作需要，很多时候我们可能需要用科学上网的方式去查资料。科学上网的途径主要有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;购买VPN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;免费的VPN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;搭建vps服务器&lt;/p&gt;
&lt;p&gt;三种方式各有各的优缺点，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Next主题配置</title>
    <link href="https://blog.orangehub.cn/2018/10/26/Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>https://blog.orangehub.cn/2018/10/26/Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</id>
    <published>2018-10-26T01:36:26.000Z</published>
    <updated>2021-04-07T07:23:31.956Z</updated>
    
    <content type="html"><![CDATA[<p>​    在<a href="https://blog.orangehub.cn/2018/10/24/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/#more">搭建Hexo博客(搭建+绑定域名+多终端同步)</a>中我们学会了如何搭建一个Hexo博客。这篇，我们主要讲解Hexo的Next主题配置(别问为什么是这个主题，大家都在用….)，不废话了，进入正题。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>我选择的Next，安装主题仅需一行代码，在你博客的根目录下打开Git Bash 输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes / next</span><br></pre></td></tr></table></figure><p>以上代码的意思是从<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next主题的GitHub项目</a>中将next下载到当前目录下的themes里面的next文件夹中。</p><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>修改你博客根目录下的配置文件<code>_config.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: next <span class="comment">## 原来是 landscape，现在改成 next</span></span><br></pre></td></tr></table></figure><h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p>修改你博客根目录下的配置文件<code>_config.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: <span class="comment">#博客名称</span></span><br><span class="line">subtitle: <span class="comment">#字幕</span></span><br><span class="line">description: <span class="comment">#博客描述</span></span><br><span class="line">keywords: <span class="comment">#关键词</span></span><br><span class="line">author: <span class="comment">#作者</span></span><br><span class="line">language: <span class="comment">#语言</span></span><br><span class="line">timezone: <span class="comment">#时区</span></span><br></pre></td></tr></table></figure><p><strong>注意：再修改language 选项时，后面跟随的值必须是你主题中所包含的值，一定不能自己随便写一个值进去。</strong></p><p>查看路径：你博客根目录\themes\next\languages</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151707.png" alt="1540970156283">PS：这里提一下，你使用<code>hexo s</code>预览的时候，你会发现是设置了语言之后界面还是英文，这个时候不要慌，使用<code>hexo clean</code>清理下database文件夹以及public文件夹就行了。然后再使用<code>hexo s</code> 预览。事实上，这个方法在遇到很多问题的时候都是通用的。</p><h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h3><p>​    设置菜单包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。</p><h4 id="第一步：设置菜单选项"><a href="#第一步：设置菜单选项" class="headerlink" title="第一步：设置菜单选项"></a>第一步：设置菜单选项</h4><p>​    进入你博客的next主题的根目录，你会发现在这里也会有一个<code>_config.yml</code>文件，真的是巧啊！这个文件主要是针对主题的设置。打开这个文件，找到<code>menu</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home <span class="comment">#主页</span></span><br><span class="line">  <span class="comment">#about: /about/ || user #关于我</span></span><br><span class="line">  tags: /tags/ || tags <span class="comment">#标签</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || th #分类</span></span><br><span class="line">  <span class="comment">#archives: /archives/ || archive #文章归档</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar #时间表</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap #站点地图</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat #404页面</span></span><br></pre></td></tr></table></figure><p>根据你的需要，取消掉注释，在博客主页就能够显示相应的菜单名称。</p><h4 id="第二步：设置菜单图标"><a href="#第二步：设置菜单图标" class="headerlink" title="第二步：设置菜单图标"></a>第二步：设置菜单图标</h4><p>​    不要关闭这个文件，继续找到<code>menu_setting</code>（就在menu下面）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Enable&#x2F;Disable menu icons &#x2F; item badges.</span><br><span class="line">menu_settings:</span><br><span class="line">  icons: false #图标</span><br><span class="line">  badges: false #徽章</span><br></pre></td></tr></table></figure><p>将icons的值改成true，就可以显示菜单图标了。</p><h4 id="第三步：设置菜单页面"><a href="#第三步：设置菜单页面" class="headerlink" title="第三步：设置菜单页面"></a>第三步：设置菜单页面</h4><p>​    以上两步都完成后，你打开博客，选择其他菜单的时候，会发现根本打不开呢。不要慌，这种情况一般是因为你没有对应的页面，所以打不开呢。我们只需要在我们博客根目录打开 Git Bash并输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">'tags'</span></span><br><span class="line">hexo new page <span class="string">'categories'</span></span><br></pre></td></tr></table></figure><p>在你的网站根目录下面的source文件夹会分别生成tags、categories以及about文件夹。</p><p>分别修改这tags和categories文件夹中的<code>index.md</code>文件，新增type属性，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-01-04 11:45:41</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>categories的修改类似。</p><p>当你新建一篇博文的时候，增加上tags和categories属性值，就能在tags和categories界面检索到你的文章了。</p><h3 id="设置侧边栏"><a href="#设置侧边栏" class="headerlink" title="设置侧边栏"></a>设置侧边栏</h3><p>同样，在你主题根目录打开<code>_config.yml</code>文件。</p><p>​    默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 主题配置文件中的 <code>sidebar</code> 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。</p><ol><li>设置侧栏的位置，修改 <code>sidebar.position</code>的值，支持的选项有：</li></ol><ul><li><code>left</code> - 靠左放置</li><li><code>right</code>- 靠右放置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  position: left12</span><br></pre></td></tr></table></figure><ol start="2"><li>设置侧栏显示的时机，修改<code>sidebar.display</code>的值，支持的选项有：</li></ol><ul><li><code>post</code> - 默认行为，在文章页面（拥有目录列表）时显示</li><li><code>always</code> - 在所有页面中都显示</li><li><code>hide</code> - 在所有页面中都隐藏（可以手动展开）</li><li><code>remove</code> - 完全移除</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  display: post</span><br></pre></td></tr></table></figure><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151715.png" alt="1540973091086"></p><h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>在你主题根目录下找到并打卡<code>_config.yml</code>文件，接着找到并修改<code>avatar</code>字段，设置成头像的链接地址。其中，头像的链接地址可以是：</p><table><thead><tr><th align="center">地址</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">完整的互联网</td><td align="center"><code>URI</code>:<code>http://example.com/avatar.png</code></td></tr><tr><td align="center">站点内的地址</td><td align="center">将头像放置主题目录下的<code>source/uploads/</code>（新建 <code>uploads</code> 目录若不存在） 配置为：<code>avatar: /uploads/avatar.png</code>或者 放置在 <code>source/images/ 目录下</code>, 配置为：<code>avatar: /images/avatar.png</code></td></tr></tbody></table><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151718.png" alt="1540973457373"></p><h3 id="设置侧边栏社交链接"><a href="#设置侧边栏社交链接" class="headerlink" title="设置侧边栏社交链接"></a>设置侧边栏社交链接</h3><p>侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在主题根目录的<code>_config.yml</code>文件中</p><h4 id="第一步：设置链接"><a href="#第一步：设置链接" class="headerlink" title="第一步：设置链接"></a>第一步：设置链接</h4><p>链接放置在 <code>social</code>字段下，一行一个链接。其键值格式是 <code>显示文本: 链接地址</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Social Links.</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimeter is the target permalink.</span></span><br><span class="line"><span class="comment"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.</span></span><br><span class="line"><span class="comment">#social:</span></span><br><span class="line">  <span class="comment">#GitHub: https://github.com/yourname || github</span></span><br><span class="line">  <span class="comment">#E-Mail: mailto:yourname@gmail.com || envelope</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#VK Group: https://vk.com/yourname || vk</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://www.instagram.com/yourname/ || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br></pre></td></tr></table></figure><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151722.png" alt="1540974064306"></p><h4 id="第二步：设置链接图标"><a href="#第二步：设置链接图标" class="headerlink" title="第二步：设置链接图标"></a>第二步：设置链接图标</h4><p>设定链接的图标，对应的字段是 <code>social_icons</code>。其键值格式是 匹配键:<code>Font Awesome</code>图标名称， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是<code>Font Awesome</code>图标的名字（不必带 fa- 前缀）。 <code>enable</code> 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">social_icons:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  icons_only: <span class="literal">false</span> <span class="comment">#只显示图标</span></span><br><span class="line">  transition: <span class="literal">false</span></span><br><span class="line">  GitHub: github</span><br><span class="line">  E-Mail: envelope</span><br><span class="line">  Google: google</span><br><span class="line">  Twitter: twitter</span><br><span class="line">  Instagram: instagram</span><br><span class="line">  <span class="comment"># Dependencies: exturl: true in Tags Settings section below.</span></span><br><span class="line">  <span class="comment"># To encrypt links above use https://www.base64encode.org</span></span><br><span class="line">  <span class="comment"># Example encoded link: `GitHub: aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQ= || github`</span></span><br><span class="line">  exturl: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151725.png" alt="1540974446321"></p><h3 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h3><p>付费阅读时代越来越近，特此增加了打赏功能，支持微信打赏和支付宝打赏。 只需要主题配置文件，搜索<code>Reward</code>字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reward</span></span><br><span class="line"><span class="comment">#reward_comment: Donate comment here</span></span><br><span class="line">wechatpay: <span class="comment">#微信收款二维码图片地址</span></span><br><span class="line">alipay: <span class="comment">#支付宝收款二维码图片地址</span></span><br><span class="line">bitcoin: <span class="comment">#比特币收款二维码图片地址</span></span><br></pre></td></tr></table></figure><h3 id="设置站点建立时间"><a href="#设置站点建立时间" class="headerlink" title="设置站点建立时间"></a>设置站点建立时间</h3><p>同一个文件搜索<code>since</code>字段，并设置相应的年份</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151728.png" alt="1540974795661"></p><h3 id="订阅微信公众号"><a href="#订阅微信公众号" class="headerlink" title="订阅微信公众号"></a>订阅微信公众号</h3><p>​    在每篇文章的末尾显示微信公众号二维码，扫一扫，轻松订阅博客。在微信公众号平台下载您的二维码，并将它存放于博客<code>source/uploads/</code>目录下。搜索<code>wechat_subscriber</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wechat Subscriber</span></span><br><span class="line">wechat_subscriber:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  qcode: <span class="comment">#二维码图片地址</span></span><br><span class="line">  description: <span class="comment">#描述</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    在&lt;a href=&quot;https://blog.orangehub.cn/2018/10/24/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/#more&quot;&gt;搭建Hexo博客(搭建+绑定域名+多终端同步)&lt;/a&gt;中我们学会了如何搭建</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>搭建Hexo博客(搭建+绑定域名+多终端同步)</title>
    <link href="https://blog.orangehub.cn/2018/10/24/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"/>
    <id>https://blog.orangehub.cn/2018/10/24/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</id>
    <published>2018-10-24T02:04:20.000Z</published>
    <updated>2021-04-07T07:10:31.169Z</updated>
    
    <content type="html"><![CDATA[<p>最近闲来无事，就想着搭一个博客，看来看去就选了Hexo+github，选择的理由有几点：</p><ol><li>支持多终端同步</li><li>支持域名绑定</li><li>维护方便，操作简单</li><li>待发现……</li></ol><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>nodejs,npm和git</li><li>一台能上网电脑(win10,macos或linux)</li><li>一个域名(备案与否都可以)</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>nodejs+npm</p><p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">安装</a></p><p>验证nodejs安装完成</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150809.png" alt="1540299351039"></p><p>验证npm安装完成</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407151000.png" alt="1540299452529"></p></li><li><p>git</p><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">安装</a></p><p>验证git安装完成</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150814.png" alt="1540301271333"></p></li></ul><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p>​    因为我们搭建的是据有多终端同步+域名访问功能的hexo博客，所以在一开始的时候，我们就应该做好一些准备工作，避免以后走弯路呢。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>多终端同步：建立github仓库进行同步</li><li>域名访问：将域名与GitHub仓库绑定即可</li></ul><h3 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h3><p>因为需要多终端同步，所以我们先在github上搭建一个空的仓库</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150818.png" alt="1540306983824"></p><p><strong>因为我已经创建了这个仓库，所以报错咯，这个不必在意的哟~</strong></p><blockquote><p>仓库名必须是你github的名字+.github.io哦！</p><p>例如：我的github的名字是 OrangeEd1t 那仓库名字一定就是 OrangeEd1t.github.io</p></blockquote><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><p>仓库创建完成后呢，我们就把我们的仓库 clone到本地来呢，打开Git Bash 输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span></span><br></pre></td></tr></table></figure><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150823.png" alt="1540307360822"></p><p>然后我们进入到刚刚克隆好的仓库呢</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> OrangeEd1t.github.io/</span><br></pre></td></tr></table></figure><p>接下来让我们看看这个文件夹里有什么呢</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll -a</span><br></pre></td></tr></table></figure><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150827.png" alt="1540307757097"></p><h3 id="清空当前文件夹"><a href="#清空当前文件夹" class="headerlink" title="清空当前文件夹"></a>清空当前文件夹</h3><p><strong>注意：不是删除文件夹里所有东西，仅仅只是拷贝出来，文件夹中包含隐藏文件夹 .git 也需要一并拷贝出来</strong></p><p>再次查看文件夹里有什么呢</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150830.png" alt="1540307804430"></p><h3 id="创建并切换到hexo分支上"><a href="#创建并切换到hexo分支上" class="headerlink" title="创建并切换到hexo分支上"></a>创建并切换到hexo分支上</h3><p><strong>为了避免管理混乱，我将hexo的配置文件和hexo生成的html页面文件分别存放在了github的同一个仓库的两个分支中。其中，hexo的配置文件存放在hexo分支(默认分支)，hexo生成的html页面文件存放在master分支</strong></p><p>在本地上使用<code>git branch</code>查看只有<code>master</code>一个分支。使用<code>git checkout -b hexo</code>创建<code>hexo</code>分支并将其作为默认分支。</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150833.png" alt="1540308890583"></p><p>创建并切换分支成功，下面我们进行hexo的安装。</p><h3 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h3><p>首先，我们用npm进行全局安装 hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>然后再在我们刚刚clone下来的的文件夹里输入 <code>hexo init</code> 进行初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>初始化完成后的文件夹目录</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150836.png" alt="1540309493303"></p><p>然后，我们依次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>执行完成后的文件夹目录</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150840.png" alt="1540309611867"></p><p>这时，我们将刚刚拷贝出去的文件再拷贝到当前文件夹中</p><p>拷贝后的文件夹目录</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150843.png" alt="1540309705579"></p><p>接着，我们打开_config.yml 文件，并修改</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150846.png" alt="1540309840145"></p><blockquote><p>repository代表的是你博客生成的html文件存放仓库的ssh地址，建议输入ssh地址</p><p>branch代表的是你博客生成的html文件存放的分支</p></blockquote><p><strong>注意：在配置所有的_config.yml文件时（包括theme中的），在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错。</strong></p><h3 id="将hexo分支push到远程hexo分支上"><a href="#将hexo分支push到远程hexo分支上" class="headerlink" title="将hexo分支push到远程hexo分支上"></a>将hexo分支push到远程hexo分支上</h3><p>依次执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"xxx"</span></span><br><span class="line">git push origin hexo</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>此时，github的远端仓库上将会有hexo和master两个分支、</p><p>master分支：存放博客生成的html文件</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150849.png" alt="1540310418808"></p><p>hexo分支：存放博客的配置文件<br><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150855.png" alt="1540310453971"></p><p>接着，我们修改下仓库的默认分支，设置默认分支为hexo分支。</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150858.png" alt="1540310573407"></p><p>好啦，现在我们就可以通过自己的仓库名字访问博客了哦！</p><h3 id="博客日常上传流程"><a href="#博客日常上传流程" class="headerlink" title="博客日常上传流程"></a>博客日常上传流程</h3><p>在本地对博客进行修改（添加新博文、修改样式等等）后，即可通过下面的流程进行管理。 </p><ol><li>依次执行：<code>git add .</code> 、<code>git commit -m &quot;...&quot;</code>、 <code>git push origin hexo</code>指令将改动推送到GitHub（此时当前分支应为hexo）； </li><li>执行hexo g -d发布网站到master分支上。<h3 id="其他终端上传博客"><a href="#其他终端上传博客" class="headerlink" title="其他终端上传博客"></a>其他终端上传博客</h3></li></ol><p>如果你想在另一个电脑上上传你自己的博客，那么你只需要如下做即可： </p><ol><li><p>从repo仓库上将项目代码clone到本地。 </p></li><li><p>切换到<code>hexo</code>分支。(若设置hexo为默认分支则跳过此步骤)</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hexo origin/hexo</span><br></pre></td></tr></table></figure><p>此时查看拉下来的repo有没有<code>.deploy_git</code>文件夹，如果有的话，删除并重新安装本地的hexo-deployer。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -r .deploy_git</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>搞定之后，即可按照日常上传流程上传更新就OK啦~</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><h3 id="域名购买"><a href="#域名购买" class="headerlink" title="域名购买"></a>域名购买</h3><p>首先，购买一个域名(我是在良心云上购买的域名)，购买的过程就不赘述了，跟淘宝买东西一样呢。</p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>域名购买好之后进入控制台-&gt;云解析 点击【解析】</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150903.png" alt="1540311028177"></p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150906.png" alt="1540348890786"></p><h3 id="设置CNAME"><a href="#设置CNAME" class="headerlink" title="设置CNAME"></a>设置CNAME</h3><p>在你博客的项目下，<code>source</code> 文件夹下面创建 CNAME 文件（没有后缀名的），在里面写上购买的域名。比如：</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150910.png" alt="1540311481069"></p><p>在 github 上面，打开 项目的（Settings）设置，然后在 <code>GitHub Pages</code>的 <code>Custom domain</code>设置里填上购买的域名。比如：</p><p><img src="https://typora-img-1252867373.cos.ap-chengdu.myqcloud.com/20210407150912.png" alt="1540311607064"></p><p>然后就大功告成啦，现在你的博客已经支持多终端同步和域名访问啦！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近闲来无事，就想着搭一个博客，看来看去就选了Hexo+github，选择的理由有几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持多终端同步&lt;/li&gt;
&lt;li&gt;支持域名绑定&lt;/li&gt;
&lt;li&gt;维护方便，操作简单&lt;/li&gt;
&lt;li&gt;待发现……&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;准备</summary>
      
    
    
    
    
  </entry>
  
</feed>
